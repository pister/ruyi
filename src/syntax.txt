# Ruyi Program Language Syntax

# Programs
<root> ::= <global declarations>?

# Declarations
<global declarations> ::= <global declaration> *
<global declaration> ::= <variable declaration> | <function declaration> | <class declaration> | <interface declaration> | <constant declaration> | <statement ends>
<variable declaration> ::= <variable auto infer type init> | (KW_VAR <variable declaration tail>)
<variable declaration tail> ::= IDENTITY <type>? (ASSIGN <expression>) ?
<variable auto infer type init> ::= IDENTITY COLON_ASSIGN <expression>

<function declaration> ::= KW_FUNC IDENTITY LPARAN <formal parameter list>? RPARAN <type>? <function body>
<class declaration> ::= KW_CLASS IDENTITY <class body>
<interface declaration> ::= KW_INTERFACE IDENTITY <interface body>
<constant declaration> ::= KW_CONST IDENTITY ASSIGN <constant initializer>
<class body> ::= LBRACE <class body declarations>? RBRACE
<class body declarations> ::= <class body declaration> | <class body declarations> <class body declaration>

<formal parameter list> ::= ( <formal parameter> ( COMMA <formal parameter>) * ) ?
<formal parameter> ::= IDENTITY DOT3? <type>
<function body> ::= <block>


# Blocks
<block> ::= LBRACE <block statements>? RBRACE
<block statements> ::= <block statement> *
<block statement> ::= <local variable declaration statement> | <statement>
<local variable declaration statement> ::= <local variable declaration> <statement ends>
<local variable declaration> ::= <variable declaration> | <variable auto infer type init>
<statement> ::= <if statement> | <while statement> | <for statement> | <expression statement> | <switch statement> | <try statement> | <return statement> | <labeled statement>
<if statement> ::= KW_IF <expression> | ( LPARAN <expression> RPARAN ) <block> <elseif statement>* <else statement>?
<elseif statement> ::= KW_ELSEIF <expression> | ( LPARAN <expression> RPARAN ) <block>
<else statement> ::= KW_ELSE <block>
<while statement> ::= KW_WHILE <expression> <block>
<for statement> ::= KW_FOR (<for three parts> | <for in>) | ( LPARAN <for three parts> | <for in> RPARAN)
<for three parts> ::= <for init>? SEMICOLON <expression>? SEMICOLON <for update>?
<for in> ::= <type> (COMMA <type>) * KW_IN <expression>

<return statement> ::= KW_RETURN <expression>? <statement ends>


<sub statement> ::= <empty statement> | <break statement> | <continue statement> | <return statement>

<expression statement> ::= <statement expression> <statement ends>
<statement expression> ::= <assignment> | <postincrement expression> | <postdecrement expression>  | <class instance creation expression> | <function invocation>

<empty statement> ::= <statement ends>
<labeled statement> ::= IDENTITY COLON <statement>

#
<statement ends> ::= SEMICOLON *

# Expression
<expression> ::= <assignment expression>
<assignment expression> ::= <conditional expression> | <assignment>
<assignment> ::= <left hand side> <assignment operator> <assignment expression>
<left hand side> ::= <name> | <field access expression> | <array access>
<assignment operator> ::= ASSIGN | MUL_ASS | DIV_ASS | MOD_ASS | ADD_ASS | SUB_ASS | SHFT_LEFT_ASS | SHFT_RIGHT_ASS | BIT_AND_ASS | BIT_XOR_ASS | BIT_OR_ASS
<conditional expression> ::= <conditional or expression> (QM <expression> Ruyi_tt_COLON <conditional expression>)?
<conditional or expression> ::= <conditional and expression> (LOGIC_OR <conditional and expression>)*
<conditional and expression> ::= <bit or expression> ( LOGIC_AND <bit or expression>)*
<bit or expression> ::= <bit and expression> (BIT_OR <bit and expression>)*
<bit and expression> ::= <equality expression> (BIT_AND <equality expression>)*
<equality expression> ::= <relational expression> ((EQUALS | NOT_EQUALS) <relational expression>)?
<relational expression> ::= <shift expression> ((KW_INSTANCEOF <reference type>) | ((LT | GT | LTE | GTE) <shift expression>)) ?
<shift expression> ::= <additive expression> ((SHFT_LEFT | SHFT_RIGHT) <additive expression>)?
<additive expression> ::= <multiplicative expression> ((ADD | SUB) <multiplicative expression>)*
<multiplicative expression> ::= <unary expression> ((MUL | DIV | MOD) <unary expression>)*
<unary expression> ::= ADD <unary expression> | SUB <unary expression> | <not plus minus expression>
<not plus minus expression> ::= BIT_INVERSE <unary expression> | LOGIC_NOT <unary expression> | <postfix expression>

<postfix expression> ::= ( <field access expression> | <name> ) (DEC | INC | <type cast>) ?
<type cast> ::= DOT RPARAN <type> RPARAN

<field access expression> ::= <primary> (DOT <dot expression tail> | LBRACKET <bracket expression tail>) *
<dot expression tail> ::= IDENTITY (LPARAN <argument list>? RPARAN)?
<bracket expression tail> ::= <expression> RBRACKET

<field access expression> = (<field access expression> | <array access expression> ) <function invocation tail>?

<field access expression> ::= <primary> (DOT IDENTITY)*
<primary> ::= <array creation> | <map creation> | <primary no new collection>
<primary no new collection> ::= <literal> <function invocation tail>? | KW_THIS | LPARAN <expression> RPARAN | <instance creation>
<instance creation> ::= IDENTITY LBRACE (IDENTITY COLON <expression> (COMMA IDENTITY COLON <expression>)*)?  RBRACE
<argument list> ::= <expression> ( COMMA <expression> )*
<array creation> ::= <array creation with cap> | <array creation with init>
<array creation with cap> ::= KW_ARRAY LPARAN <array type> COMMA <expression> (COMMA <expression>)? RPARAN
<array creation with init> ::= <array type> LBRACKET (<expression> (COMMA <expression>)*)?  RBRACKET
<map creation> ::= KW_MAP LPARAN <map type> RPARAN

<function invocation tail> ::= LPARAN <argument list>? RPARAN

<array access> ::= <array variable access> | <variable primary access>
<array variable access> ::= <name> LBRACKET <expression> RBRACKET
<variable primary access> ::= <primary no new collection> LBRACKET <expression> RBRACKET

# Types
<type> ::= <primitive type> | <reference type>
<primitive type> ::= <numeric type> | bool
<numeric type> ::= <integral type> | <floating-point type>
<integral type> ::= KW_BYTE | KW_SHORT| KW_INT | KW_RUNE | KW_LONG
<floating-point type> ::= KW_FLOAT | KW_DOUBLE
<reference type> ::= IDENTITY | <array type> | <map type>
<array type> ::= LBRACKET RBRACKET <type>
<map type> ::= LBRACKET IDENTITY RBRACKET <type>
<raw type> ::= <primitive type> | IDENTITY


# Tokens
<name> ::= IDENTITY (DOT IDENTITY) *
<literal> ::= INTEGER | FLOAT | KW_TRUE | KW_FALSE | RUNE | STRING | KW_NULL | <name> 
